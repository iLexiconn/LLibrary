buildscript {
  repositories {
    jcenter()
    maven {
      name = "forge"
      url = "http://files.minecraftforge.net/maven"
    }
    maven {
      name = "gradle"
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.9"
  }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven-publish"
apply plugin: "com.matthewprenger.cursegradle"

import groovy.json.JsonSlurper

def secretFile = file "secret.json"
project.ext.secret = null
if (secretFile.exists()) {
  secretFile.withReader {
    project.ext.secret = new JsonSlurper().parse it
  }
}

def mod_file = getModFile()
def mod_version = getModField("VERSION", mod_file)
version = "$mod_version-1.12.2"

group = "net.ilexiconn"
archivesBaseName = "llibrary"
sourceCompatibility = targetCompatibility = "1.8"
def minecraft_mappings = "stable_39"
def core_plugin = "net.ilexiconn.llibrary.server.core.plugin.LLibraryPlugin"

minecraft {
  version = "1.12.2-14.23.5.2772"
  runDir = "minecraft"
  mappings = minecraft_mappings
  makeObfSourceJar = false

  if (secret) {
    replace '${fingerprint}', secret.signSHA1
    replaceIn mod_file
  }

  clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
  serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
}

configurations {
  embedMod
}

repositories {
  maven { url = "https://maven.mcmoddev.com" }
}

dependencies {
  compile "net.ilexiconn:llibrary-core:1.0.8-1.12.2"
  embedMod "net.ilexiconn:llibrary-core:1.0.8-1.12.2"
}

processResources {
  inputs.property "version", project.version
  inputs.property "mcversion", project.minecraft.version

  from(sourceSets.main.resources.srcDirs) {
    include "mcmod.info"
    expand "version": project.version, "mcversion": project.minecraft.version
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude "mcmod.info"
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

task devJar(type: Jar) {
  classifier = "dev"
  from sourceSets.main.output
  manifest {
    attributes "FMLAT": "llibrary_at.cfg"
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.getDestinationDir()
}

task signJar(type: SignJar, dependsOn: reobfJar) {
  if (secret) {
    keyStore = secret.keyStore
    alias = secret.keyStoreAlias
    storePass = secret.keyStorePass
    keyPass = secret.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
  }
}

jar {
  from(configurations.embedMod.files) {
    include '*'
  }
  manifest {
    attributes "FMLAT": "llibrary_at.cfg"
    attributes "ContainedDeps": configurations.embedMod.files.collect { it.name }.join(" ")
    attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}"
    attributes "Timestamp": System.currentTimeMillis()
  }
}

artifacts {
  archives sourcesJar
  archives devJar
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId project.archivesBaseName
      version project.version

      from components.java

      artifact devJar { classifier "dev" }
      artifact sourcesJar { classifier "sources" }
      artifact javadocJar { classifier "javadoc" }
    }
  }
  repositories {
    maven {
      credentials {
        username secret?.username ?: ""
        password secret?.password ?: ""
      }
      url secret?.url ?: ""
    }
  }
}

build.dependsOn signJar

curseforge {
  tasks.curseforge.dependsOn build

  def url = "https://gist.githubusercontent.com/gegy1000/a6639456aeb8edd92cbf7cbfcf9d65d9/raw/llibrary_updates.json".toURL()
  def versions = new JsonSlurper().parseText url.text

  if (secret) {
    apiKey = secret.apiKey
  } else {
    apiKey = ""
  }

  project {
    id = "243298"

    releaseType = "release"
    def game_version = project.minecraft.version
    def curse_version = mod_version
    def latestVersion = versions.promos["${game_version}-latest"]
    changelog = versions[game_version][latestVersion] ?: ""

    addGameVersion(game_version)

    mainArtifact(jar) { displayName = "LLibrary $curse_version" }
    addArtifact(sourcesJar) { displayName = "LLibrary $curse_version Sources" }
    addArtifact(devJar) { displayName = "LLibrary $curse_version Development" }
    addArtifact(javadocJar) { displayName = "LLibrary $curse_version Javadoc" }
  }
}

String getModFile() {
  String path = ""
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.matches("@Mod\\s*\\(.*")) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getModField(String type, String mod_file) {
  if (mod_file.length() == 0) {
    return ""
  }
  String field = ""
  String prefix = "public static final String $type = \""
  File file = file(mod_file)
  file.eachLine { String s ->
    s = s.trim()
    if (s.startsWith(prefix)) {
      s = s.substring(prefix.length(), s.length() - 2)
      field = s
    }
  }
  return field
}
